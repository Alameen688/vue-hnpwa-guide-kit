// DISCLAIMER, the source came from vue-hackernews-2.0/build/dev-server.js
// https://goo.gl/7oHLbh, and customized
const path = require('path')
const EventEmitter = require('events')
const webpack = require('webpack')
const MFS = require('memory-fs')

const clientConfig = require('./webpack.client.conf')
const serverConfig = require('./webpack.server.conf')

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
  } catch (err) {
  }
}

function watchWebpackServer (ready, config) {
  const mfs = new MFS()
  const compiler = webpack(config)
  let setup = true

  compiler.outputFileSystem = mfs
  compiler.watch({}, (err, stats) => {
    if (err) {
      ready.emit('error', [err])
    }
    
    stats = stats.toJson()
    if (stats.errors.length) {
      ready.emit('error', stats.errors)
      return
    }

    // read bundle generated by vue-ssr-webpack-plugin
    const bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))

    ready.emit('done', { bundle })
  })
}

function compileWebpackClient(ready, config, app) {
  // modify client config to work with hot middleware
  config.entry.app = ['webpack-hot-middleware/client', config.entry.app]
  config.output.filename = '[name].js'
  config.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // create a dev middleware for server
  const compiler = webpack(config)
  const middleware = require('webpack-dev-middleware')(compiler, {
    publicPath: config.output.publicPath,
    noInfo: true
  })

  // bind middleware and compiler
  app.use(middleware)
  app.use(require('webpack-hot-middleware')(compiler)) 

  // bind done event of compiler
  compiler.plugin('done', stats => {
    stats = stats.toJson()
    
    if (stats.errors.length) {
      ready.emit('error', stats.errors)
      return
    }

    if (stats.warnings.length) {
      ready.emit('warning', stats.warnings)
    }

    // read ss-client-manifest from middleware
    const clientManifest = JSON.parse(readFile(
      middleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
  
    ready.emit('done', { clientManifest })
  })
}



class Ready extends EventEmitter {
  constructor() {
    super()
    this.reset()
    
    this.on('done', ({ bundle, clientManifest }) => {
      if (bundle) {
        this.state.bundle = bundle
      }

      if (clientManifest) {
        this.state.clientManifest = clientManifest
      }

      if (this.isReady()) {
        this.emitReady()
      }
    })

    this.on('error', errors => {
      errors.forEach(err => console.error(err))
    })

    this.on('warning', warnings => {
      warnings.forEach(warn => console.warn(warn))
    })
  }

  reset() {
    this.state = {
      bundle: undefined,
      clientManifest: undefined
    }
  }

  isReady() {
    return this.state.bundle !== undefined 
      && this.state.clientManifest !== undefined
  }

  emitReady() {
    this.emit('ready', this.state)
    this.reset()
  }
}

module.exports = function setupDevServer (app, done) {
  const ready = new Ready()

  compileWebpackClient(ready, clientConfig, app)
  watchWebpackServer(ready, serverConfig)

  return ready
}
